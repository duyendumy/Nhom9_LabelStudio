{"name": "test_reset_invite_link", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ls-hamburger ls-hamburger_animated\">...</span> is not clickable at point (211, 23). Other element would receive the click: <div class=\"ls-modal__wrapper\">...</div>\n  (Session info: chrome=111.0.5563.149)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x0034DCE3]\n\t(No symbol) [0x002E39D1]\n\t(No symbol) [0x001F4DA8]\n\t(No symbol) [0x002252EA]\n\t(No symbol) [0x00223BBA]\n\t(No symbol) [0x00221EFB]\n\t(No symbol) [0x00221027]\n\t(No symbol) [0x00218D05]\n\t(No symbol) [0x0023AECC]\n\t(No symbol) [0x00218726]\n\t(No symbol) [0x0023B224]\n\t(No symbol) [0x0024D57C]\n\t(No symbol) [0x0023ACC6]\n\t(No symbol) [0x00216F68]\n\t(No symbol) [0x002180CD]\n\tGetHandleVerifier [0x005C3832+2506274]\n\tGetHandleVerifier [0x005F9794+2727300]\n\tGetHandleVerifier [0x005FE36C+2746716]\n\tGetHandleVerifier [0x003F6690+617600]\n\t(No symbol) [0x002EC712]\n\t(No symbol) [0x002F1FF8]\n\t(No symbol) [0x002F20DB]\n\t(No symbol) [0x002FC63B]\n\tBaseThreadInitThunk [0x76378744+36]\n\tRtlGetAppContainerNamedObjectPath [0x7752587D+253]\n\tRtlGetAppContainerNamedObjectPath [0x7752584D+205]", "trace": "self = <test_invite.TestInvite object at 0x0000026B966003D0>, test_setup = None\n\n    def test_reset_invite_link(self, test_setup):\n        email_data = \"labelstudio09@gmail.com\"\n        password_data = \"1234asdfASDF\"\n        with allure.step(\"Entering a valid email \" + email_data):\n            email = driver.find_element(By.ID,'email')\n            email.send_keys(email_data)\n    \n        with allure.step(\"Entering a valid password \" + password_data):\n            password = driver.find_element(By.ID,'password')\n            password .send_keys(\"1234asdfASDF\")\n    \n        login_button = driver.find_element(By.CLASS_NAME,'ls-button_look_primary')\n        login_button.click()\n        login_button = driver.find_element(By.CLASS_NAME,'ls-button_look_primary')\n        login_button.click()\n    \n        hamburger = driver.find_element(By.CLASS_NAME,'ls-hamburger_animated')\n>       hamburger.click()\n\ntest\\test_invite.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Dung DeLL 7537\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nC:\\Users\\Dung DeLL 7537\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webelement.py:404: in _execute\n    return self._parent.execute(command, params)\nC:\\Users\\Dung DeLL 7537\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000026B96600520>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7752587D+253]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x7752584D+205]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"ls-hamburger ls-hamburger_animated\">...</span> is not clickable at point (211, 23). Other element would receive the click: <div class=\"ls-modal__wrapper\">...</div>\nE         (Session info: chrome=111.0.5563.149)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x0034DCE3]\nE       \t(No symbol) [0x002E39D1]\nE       \t(No symbol) [0x001F4DA8]\nE       \t(No symbol) [0x002252EA]\nE       \t(No symbol) [0x00223BBA]\nE       \t(No symbol) [0x00221EFB]\nE       \t(No symbol) [0x00221027]\nE       \t(No symbol) [0x00218D05]\nE       \t(No symbol) [0x0023AECC]\nE       \t(No symbol) [0x00218726]\nE       \t(No symbol) [0x0023B224]\nE       \t(No symbol) [0x0024D57C]\nE       \t(No symbol) [0x0023ACC6]\nE       \t(No symbol) [0x00216F68]\nE       \t(No symbol) [0x002180CD]\nE       \tGetHandleVerifier [0x005C3832+2506274]\nE       \tGetHandleVerifier [0x005F9794+2727300]\nE       \tGetHandleVerifier [0x005FE36C+2746716]\nE       \tGetHandleVerifier [0x003F6690+617600]\nE       \t(No symbol) [0x002EC712]\nE       \t(No symbol) [0x002F1FF8]\nE       \t(No symbol) [0x002F20DB]\nE       \t(No symbol) [0x002FC63B]\nE       \tBaseThreadInitThunk [0x76378744+36]\nE       \tRtlGetAppContainerNamedObjectPath [0x7752587D+253]\nE       \tRtlGetAppContainerNamedObjectPath [0x7752584D+205]\n\nC:\\Users\\Dung DeLL 7537\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementClickInterceptedException"}, "steps": [{"name": "Entering a valid email labelstudio09@gmail.com", "status": "passed", "start": 1681561514312, "stop": 1681561514464}, {"name": "Entering a valid password 1234asdfASDF", "status": "passed", "start": 1681561514464, "stop": 1681561514562}], "start": 1681561514312, "stop": 1681561518216, "uuid": "44e19055-cc46-44c3-bafe-92fac87479a9", "historyId": "6502c885d5ad2c8c757947fc6c4b5ce4", "testCaseId": "9f432132884daef743384af618f851a4", "fullName": "test.test_invite.TestInvite#test_reset_invite_link", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_invite"}, {"name": "subSuite", "value": "TestInvite"}, {"name": "host", "value": "DESKTOP-GUK9NB5"}, {"name": "thread", "value": "7788-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_invite"}]}