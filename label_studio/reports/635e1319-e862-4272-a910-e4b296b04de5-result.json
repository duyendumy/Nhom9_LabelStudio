{"name": "test_login_by_valid_user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=112.0.5615.139)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0122DCE3+50899]\n\t(No symbol) [0x011BE111]\n\t(No symbol) [0x010C5450]\n\t(No symbol) [0x010B879A]\n\t(No symbol) [0x010B7118]\n\t(No symbol) [0x010B7668]\n\t(No symbol) [0x010C6D22]\n\t(No symbol) [0x0111E631]\n\t(No symbol) [0x0110B8FC]\n\t(No symbol) [0x0111E01C]\n\t(No symbol) [0x0110B6F6]\n\t(No symbol) [0x010E7708]\n\t(No symbol) [0x010E886D]\n\tGetHandleVerifier [0x01493EAE+2566302]\n\tGetHandleVerifier [0x014C92B1+2784417]\n\tGetHandleVerifier [0x014C327C+2759788]\n\tGetHandleVerifier [0x012C5740+672048]\n\t(No symbol) [0x011C8872]\n\t(No symbol) [0x011C41C8]\n\t(No symbol) [0x011C42AB]\n\t(No symbol) [0x011B71B7]\n\tBaseThreadInitThunk [0x75178744+36]\n\tRtlGetAppContainerNamedObjectPath [0x775C587D+253]\n\tRtlGetAppContainerNamedObjectPath [0x775C584D+205]", "trace": "self = <test_signin.TestSingIn object at 0x00000269BE8DAE90>\n\n    @pytest.fixture()\n    def test_setup(self):\n        global driver\n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n       # driver = webdriver.Chrome(executable_path=\"D:/Cong cu va Moi truong phat trien phan mem/chromedriver/chromdriver.exe\")\n        driver.implicitly_wait(15)\n        driver.maximize_window\n       # driver.get(\"http://localhost:8080\")\n>       driver.get(\"Labelstudio-env.eba-pbtrgnpm.us-east-1.elasticbeanstalk.com\")\n\ntest_selenium\\test_signin.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Users\\Dung DeLL 7537\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\nC:\\Users\\Dung DeLL 7537\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000269BE8DBBE0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775C587D+253]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x775C584D+205]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=112.0.5615.139)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0122DCE3+50899]\nE       \t(No symbol) [0x011BE111]\nE       \t(No symbol) [0x010C5450]\nE       \t(No symbol) [0x010B879A]\nE       \t(No symbol) [0x010B7118]\nE       \t(No symbol) [0x010B7668]\nE       \t(No symbol) [0x010C6D22]\nE       \t(No symbol) [0x0111E631]\nE       \t(No symbol) [0x0110B8FC]\nE       \t(No symbol) [0x0111E01C]\nE       \t(No symbol) [0x0110B6F6]\nE       \t(No symbol) [0x010E7708]\nE       \t(No symbol) [0x010E886D]\nE       \tGetHandleVerifier [0x01493EAE+2566302]\nE       \tGetHandleVerifier [0x014C92B1+2784417]\nE       \tGetHandleVerifier [0x014C327C+2759788]\nE       \tGetHandleVerifier [0x012C5740+672048]\nE       \t(No symbol) [0x011C8872]\nE       \t(No symbol) [0x011C41C8]\nE       \t(No symbol) [0x011C42AB]\nE       \t(No symbol) [0x011B71B7]\nE       \tBaseThreadInitThunk [0x75178744+36]\nE       \tRtlGetAppContainerNamedObjectPath [0x775C587D+253]\nE       \tRtlGetAppContainerNamedObjectPath [0x775C584D+205]\n\nC:\\Users\\Dung DeLL 7537\\AppData\\Roaming\\Python\\Python310\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidArgumentException"}, "description": "Validate Label Studio with valid login credentials", "start": 1683268428269, "stop": 1683268428269, "uuid": "d24752fc-60c2-4e6d-9ca0-43c385e73875", "historyId": "be34035a4639990958f7d1c052643f38", "testCaseId": "db36e0266efa395da425bb138022a813", "fullName": "test_selenium.test_signin.TestSingIn#test_login_by_valid_user", "labels": [{"name": "severity", "value": "CRITICAL"}, {"name": "parentSuite", "value": "test_selenium"}, {"name": "suite", "value": "test_signin"}, {"name": "subSuite", "value": "TestSingIn"}, {"name": "host", "value": "DESKTOP-GUK9NB5"}, {"name": "thread", "value": "5668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_selenium.test_signin"}]}